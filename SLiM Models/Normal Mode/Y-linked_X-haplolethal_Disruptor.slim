// Overlapping Generation.
// Viability Model.
// Constant-population Mode OFF in this model.
// Always keep R1_OCCURRENCE_RATE = 0.0 in this model.

// Construction: Element on Y chromosome targets a haplolethal gene on X chromosome. Any offspring inheriting X chromosome with an R2 allele will be non-viable and don't contribute to the competition.

initialize() {
    
    // Overlapping generation
	 defineCfgParam("WEEKS_OF_GENERATION", 6);
	 survival_rate = c(1);
	 for (i in 1:WEEKS_OF_GENERATION){
    survival_rate = c(survival_rate,(WEEKS_OF_GENERATION-i)/(WEEKS_OF_GENERATION-i+1));
    }
    defineConstant("INITIAL_FEMALE_AGE_DISTRIBUTION",c(WEEKS_OF_GENERATION,WEEKS_OF_GENERATION:1)/sum(1:WEEKS_OF_GENERATION));
    defineConstant("INITIAL_MALE_AGE_DISTRIBUTION",INITIAL_FEMALE_AGE_DISTRIBUTION);
    defineConstant("SURVIVE_RATE",survival_rate);
    defineConstant("GENERATION_TIME",sum(c(1:WEEKS_OF_GENERATION)*INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION])); 

    // Resistance phase parameters:
    defineCfgParam("GERMLINE_RESISTANCE_RATE", 0.85);
    defineCfgParam("R1_OCCURRENCE_RATE", 0.0);//Always keep it 0.0
    defineCfgParam("EMBRYO_RESISTANCE_RATE", 0.0);
	 defineCfgParam("DRIVE_FITNESS_VALUE", 1.0);

    // Drop parameters:
    defineCfgParam("CAPACITY", 1000);
	 defineCfgParam("RELEASE_RATIO", 0.1);
	 defineCfgParam("LOW_DENSITY_GROWTH_RATE", 6.0);	
	 defineCfgParam("DROP_SIZE",CAPACITY/2*RELEASE_RATIO/GENERATION_TIME);
    defineConstant("MALE_ONLY_DROP", T);
    defineConstant("FEMALE_ONLY_DROP", F);

    // Ecology parameters:
    defineConstant("MAX_ATTEMPTS_TO_FIND_SUITABLE_MATE", 10);
    defineConstant("MAX_OFFSPRING", 100);
    // End configuration variables.

    // This simulation will use a non-Wright-Fisher model.
    initializeSLiMModelType("nonWF");

    // 2 wt locus on 2 chromosomes
    wt1 = initializeMutationType("m1", 0.5, "f", 0.0);
    wt2 = initializeMutationType("m2", 0.5, "f", 0.0);
    // Cas9 on Y chromosome
    dr = initializeMutationType("m3", 0.5, "f", 0.0);
    // Resistance alleles on Autosomes
    r1 = initializeMutationType("m4", 0.5, "f", 0.0);
    r2 = initializeMutationType("m5", 0.5, "f", 0.0);
    // R3 allele prevents site 3 on Y chromosome from being cut
    r3 = initializeMutationType("m6", 0.5, "f", 0.0);
    
    variations1 = c(wt1, dr);// Site 1.
    variations2 = c(wt2, r1, r2, r3);// Site 3.
    
    // Variations are all part of g1 genome element.
    initializeGenomicElementType("g1", variations1, c(1, 1));
    initializeGenomicElementType("g2", variations2, c(1, 1, 1, 1));

    // Element is NUM_LOCI long, each spot on the element representing a drive location.

	 initializeGenomicElement(g1, 1, 1);
	 initializeGenomicElement(g2, 3, 3);
   
    // These variations overwrite one another.
    variations1.mutationStackPolicy = "l";
    variations1.mutationStackGroup = 1;
    variations2.mutationStackPolicy = "l";
    variations2.mutationStackGroup = 1;

    // No mutation in this model.
    initializeMutationRate(0.0);

    // Force autosomals to be independent.
    initializeRecombinationRate(0.0);
	 
    // Simulate sexual reproduction: A for autosome.
    initializeSex("A");
}

function (void)defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

//// HELPER FUNCTION FOR FORMING A RESISTANCE ALLELE AT A GIVEN LOCUS.
function (void)addResistanceAllele(o<Genome>$ genome, i$ locus) {
    // Resistance alleles form at a specified rate.
    
    if(runif(1) < R1_OCCURRENCE_RATE)
        genome.addNewDrawnMutation(m4, locus);
    else
        genome.addNewDrawnMutation(m5, locus);
}

//// FUNCTION FOR CAS9 EFFECTS IN THE GERMLINE AND EMBRYO.
function (void)driveResistance(o<Genome>$ child_chromosome, o<Individual>$ parent, f$ resistance_rate) {
    // If parent doesn't have wind allele, nothing happens.
    if (!sum(parent.genomes.countOfMutationsOfType(m3)))
        return;

    // Child must be inheritting wt2 to cut, or nothing happens.
    if (!child_chromosome.countOfMutationsOfType(m2))
        return;

    // The wt loci the child is inheriting
    wt_loci = child_chromosome.positionsOfMutationsOfType(m2);
    
    if (runif(1) < resistance_rate)
      	addResistanceAllele(child_chromosome, wt_loci);
}

//// HELPER FUNCTION TO OVERWRITE ONE GENOME WITH ANOTHER.
function (void)copy_genome(o<Genome>$ source, o<Genome>$ destination) {
    m1_loci = source.positionsOfMutationsOfType(m1);
    m2_loci = source.positionsOfMutationsOfType(m2);
    m3_loci = source.positionsOfMutationsOfType(m3);
    m4_loci = source.positionsOfMutationsOfType(m4);
    m5_loci = source.positionsOfMutationsOfType(m5);
    m6_loci = source.positionsOfMutationsOfType(m6);
    for (i in seqAlong(m1_loci))
        destination.addNewDrawnMutation(m1, m1_loci[i]);
    for (i in seqAlong(m2_loci))
        destination.addNewDrawnMutation(m2, m2_loci[i]);
    for (i in seqAlong(m3_loci))
        destination.addNewDrawnMutation(m3, m3_loci[i]);
    for (i in seqAlong(m4_loci))
        destination.addNewDrawnMutation(m4, m4_loci[i]);
    for (i in seqAlong(m5_loci))
        destination.addNewDrawnMutation(m5, m5_loci[i]);
    for (i in seqAlong(m6_loci))
        destination.addNewDrawnMutation(m6, m6_loci[i]);
}

//// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {
	 
	 // force daughters to inherit father's x and sons to inherit father's y:
	 if(child.sex == "M")
				copy_genome(parent2.genome2, child.genome2);
	 if(child.sex == "F")
				copy_genome(parent2.genome1, child.genome2);
	 
    // Apply effects that happen in the germline.
    
    driveResistance(child.genome1, parent1, GERMLINE_RESISTANCE_RATE);
    driveResistance(child.genome2, parent2, GERMLINE_RESISTANCE_RATE);
    
    driveResistance(child.genome1, parent1, EMBRYO_RESISTANCE_RATE);
    driveResistance(child.genome2, parent1, EMBRYO_RESISTANCE_RATE);
    
    r2 = sum(child.genomes.countOfMutationsOfType(m5)==1);        
    
    if (r2)
    	return F;
    
  return T;
} 

//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
  fitness_value = 1.0;
  return fitness_value;}

//// FUNCTION FOR EVALUATING INFERTILITY CAUSED BY SUPRESSION DRIVES.
function (logical)isInfertile(o<Individual>$ ind) {
return F;
     }

//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL, "F") {

    if (isInfertile(individual))
			return;

	// Females choose a random provisional mate,
	// but make a final mating decision based on the attractiveness of that mate,
	// as determined by the fitness of the mate.
	// If a mate is rejected, the female tries again,
	// up to a maximum number of tries, after which she gives up.
		attempt_no = 0;
		while (1) {
		
		//First, select a random potential mate.
			selected_mate = subpop.sampleIndividuals(1, sex="M");
			if (!selected_mate.size())
				return; // No available mates.

		//Determine attractiveness of potential mate.
			mate_attractiveness = genotypeFitness(selected_mate);

		//Determine if this mate is chosen, based on attractiveness.
			if (runif(1) < mate_attractiveness)
				break; // Select this mate.
		
		//After ten candidates fail, female gives up.
			attempt_no = attempt_no + 1;
			if (attempt_no == MAX_ATTEMPTS_TO_FIND_SUITABLE_MATE)
				return;
		}
	
	//Mate has now been selected.
		// Check to see if mate is infertile because of drive mechanics.
		if (isInfertile(selected_mate))
			return;

	  		p = genotypeFitness(individual) ;
			
			num_offspring = 0;			
			if (p>0){
	  		num_offspring = rpois(1, MAX_OFFSPRING*p/GENERATION_TIME);}
	  
		for (i in seqLen(num_offspring)){
			offspring = subpop.addCrossed(individual, selected_mate);
			}
}

//START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 early() {
	// Start with a population of wild type flies.
	sim.addSubpop("p1", asInteger(CAPACITY*(1+MAX_OFFSPRING*0.5/GENERATION_TIME)));
	all = p1.individuals;
	
	f = all[all.sex == "F"];
	m = all[all.sex == "M"];	
	
	sim.setValue("npops", 1);
	female_ages = size(INITIAL_FEMALE_AGE_DISTRIBUTION)-1;
   male_ages = size(INITIAL_FEMALE_AGE_DISTRIBUTION)-1;
   for (ind in all){
   	if (ind.sex=="F") {
    		ind.age = sample(0:female_ages,1,F,c(MAX_OFFSPRING*0.5/GENERATION_TIME,INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION]));
    	}
    	else {
    		ind.age = sample(0:male_ages,1,F,c(MAX_OFFSPRING*0.5/GENERATION_TIME,INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION]));
    	}
    }

f.genomes.addNewDrawnMutation(m1, 1);
f.genomes.addNewDrawnMutation(m2, 3);

m.genome1.addNewDrawnMutation(m1, 1);//X chromosome
m.genome1.addNewDrawnMutation(m2, 3);//X chromosome

m.genome2.addNewDrawnMutation(m1, 1);//Y chromosome
m.genome2.addNewDrawnMutation(m6, 3);//Y chromosome, r3 to avoid being cut
}
    
//// AGE BASED SURVIVAL RULES
early() {	
		all = p1.individuals;
		new_larva = sum(all.age == 0);
		competition_ratio = new_larva / (MAX_OFFSPRING * 0.5 * CAPACITY/GENERATION_TIME);
		viability = INITIAL_FEMALE_AGE_DISTRIBUTION[0] * (((1 - LOW_DENSITY_GROWTH_RATE) * competition_ratio) + LOW_DENSITY_GROWTH_RATE) / (MAX_OFFSPRING / GENERATION_TIME / 2);
		for(ind in all){
			ind.fitnessScaling = SURVIVE_RATE[ind.age];
				if(ind.age == 0){
					
					ind.fitnessScaling = ifelse(viability<0,0.0,viability);}
		}	
}

//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10: early() {
	id_num = sim.getValue("npops") + 1;
	sim.setValue("npops", id_num);
	if (MALE_ONLY_DROP)
		sim.addSubpop(id_num, asInteger(DROP_SIZE), 1.0);
	else if (FEMALE_ONLY_DROP)
		sim.addSubpop(id_num, DROP_SIZE, 0.0);
	else
		sim.addSubpop(id_num, DROP_SIZE);
		
	drop = sim.subpopulations[id_num-1].individuals;	
	drop.age == 1;

  // Now set the drop individuals to the correct genotypes:
	drop.genome1.addNewDrawnMutation(m1, 1);//X chromosome Site 1: wt1  
	drop.genome1.addNewDrawnMutation(m2, 3);//X chromosome Site 3: wt2  
   
   drop.genome2.addNewDrawnMutation(m3, 1);//Y chromosome Site 1: disruptor
	drop.genome2.addNewDrawnMutation(m6, 3);//Y chromosome Site 3: r3 to avoid being cut
	     
	p1.takeMigrants(drop);
        }


//// PROGRAM OUTPUT.
early() {
		// 20.1 Calculate rates that we are intersted in:
			all = p1.individuals;			
			m = all[all.sex == "M"];
			f = all[all.sex == "F"];
			adult=all[all.age > 0];
			adult_f = f[f.age > 0];
			adult_m = m[m.age > 0];
			total_adults = sum(all.age > 0);
			total_adult_females = sum(f.age > 0);		
			
			num_dr = sum(all.genomes.countOfMutationsOfType(m3) == 1);
			rate_dr = num_dr / (2 * size(all));
			num_has_drive = sum(all.genome1.countOfMutationsOfType(m3) == 1 | all.genome2.countOfMutationsOfType(m3) == 1);
			
			rate_has_drive = num_has_drive / (size(all));
							
			num_fertile_female = total_adult_females;
						
			this_gen = sim.cycle;
			
			Constant_GL = 0;
					
			catn("OUT:: " + this_gen + " " + total_adults + " " + total_adult_females + " " + num_fertile_female + " " + rate_dr + " " + rate_has_drive + " " + RELEASE_RATIO + " " + Constant_GL + " " + GERMLINE_RESISTANCE_RATE);
			
			if(num_fertile_female == 0 | p1.individualCount == 0){
			catn("SUPPRESSED:: " + this_gen + " " + total_adults + " " + total_adult_females + " " + num_fertile_female + " " + rate_dr + " " + rate_has_drive + " " + RELEASE_RATIO + " " + Constant_GL + " " + GERMLINE_RESISTANCE_RATE);
			sim.simulationFinished();
					}			
			}

//// PROGRAM END CONDITION.
267 late() {
		catn("NOT:: ");
    	sim.simulationFinished();
}