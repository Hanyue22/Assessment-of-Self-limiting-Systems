// Overlapping Generation.
// Viability Model.
// Constant-population Mode OFF in this model.
// Distant-site TADE.
// Always keep EMBRYO_RESISTANCE_RATE = 1.0 in this model.

initialize() {
    // Fitness parameters:
    defineCfgParam("DRIVE_FITNESS_VALUE", 1.0);
    defineConstant("R2_FITNESS_VALUE", 1.0);
    
    // Overlapping generation
	 defineCfgParam("WEEKS_OF_GENERATION", 6);
	 survival_rate = c(1);
	 for (i in 1:WEEKS_OF_GENERATION){
    survival_rate = c(survival_rate,(WEEKS_OF_GENERATION-i)/(WEEKS_OF_GENERATION-i+1));
    }
    defineConstant("INITIAL_FEMALE_AGE_DISTRIBUTION",c(WEEKS_OF_GENERATION,WEEKS_OF_GENERATION:1)/sum(1:WEEKS_OF_GENERATION));
    defineConstant("INITIAL_MALE_AGE_DISTRIBUTION",INITIAL_FEMALE_AGE_DISTRIBUTION);
    defineConstant("SURVIVE_RATE",survival_rate);
    defineConstant("GENERATION_TIME",sum(c(1:WEEKS_OF_GENERATION)*INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION])); 

    // Resistance phase parameters:
    defineCfgParam("GERMLINE_RESISTANCE_RATE", 1.0);
    defineCfgParam("EMBRYO_RESISTANCE_RATE", 1.0);

    // Drop parameters:
    defineCfgParam("CAPACITY", 1000);
	 defineCfgParam("RELEASE_RATIO",2.0);
	 defineCfgParam("LOW_DENSITY_GROWTH_RATE",6.0);	
	 defineCfgParam("DROP_SIZE",CAPACITY/2*RELEASE_RATIO/GENERATION_TIME);
    defineConstant("HETEROZYGOUS_DROP", F);

    // Ecology parameters:
    defineConstant("MAX_ATTEMPTS_TO_FIND_SUITABLE_MATE", 10);
    defineConstant("MAX_OFFSPRING", 100);
    // End configuration variables.

    // This simulation will use a non-Wright-Fisher model.
    initializeSLiMModelType("nonWF");

    // Variations.
    wt1 = initializeMutationType("m1", 0.5, "f", 0.0);
    dr = initializeMutationType("m2", 0.5, "f", 0.0);
   
    tra = initializeMutationType("m4", 0.5, "f", 0.0);
    tra_r2 = initializeMutationType("m5", 0.5, "f", 0.0);
    
	 X = initializeMutationType("m6", 0.5, "f", 0.0);
	 Y = initializeMutationType("m7", 0.5, "f", 0.0);    
    
    variations1 = c(wt1, dr);
    variations2 = c(tra, tra_r2);
    variations3 = c(X, Y);

    // Variations are all part of g1 genome element.
    initializeGenomicElementType("g1", variations1, c(1, 1));// Drive site, haplosufficient gene.
    initializeGenomicElementType("g2", variations2, c(1, 1));// Tra site, female individuals without any tra would be converted to males.
    initializeGenomicElementType("g3", variations3, c(1, 1));// Sex chromosomes.

    // Element is NUM_LOCI long, each spot on the element representing a drive location.
    
    initializeGenomicElement(g1, 1, 1);
    initializeGenomicElement(g2, 3, 3);
    initializeGenomicElement(g3, 5, 5);

    // These variations overwrite one another.
    variations1.mutationStackPolicy = "l";
    variations1.mutationStackGroup = 1;
	 variations2.mutationStackPolicy = "l";
    variations2.mutationStackGroup = 1;
    variations3.mutationStackPolicy = "l";
    variations3.mutationStackGroup = 1;
   
    // No mutation in this model.
    initializeMutationRate(0.0);

    // All sites are independent.
    
    initializeRecombinationRate(0.5);

}

function (void)defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

function (void)addResistanceAllele(o<Genome>$ genome, i$ locus) {
	genome.addNewDrawnMutation(m5, locus);
}

//// FUNCTION FOR CAS9 EFFECTS IN THE GERMLINE AND EMBRYO.
function (void)driveResistance(o<Genome>$ child_chromosome, o<Individual>$ parent, f$ resistance_rate) {
    // If parent doesn't have drive allele, nothing happens.
    if (!sum(parent.genomes.countOfMutationsOfType(m2)))
        return;

    // Child must be inheritting wt and tra to cut, or nothing happens.
    if (!child_chromosome.countOfMutationsOfType(m4))
        return;
        
    if (runif(1) < resistance_rate)
        addResistanceAllele(child_chromosome, 3);
}

//// HELPER FUNCTION TO OVERWRITE ONE GENOME WITH ANOTHER.
function (void)copy_genome(o<Genome>$ source, o<Genome>$ destination) {
    m1_loci = source.positionsOfMutationsOfType(m1);
    m2_loci = source.positionsOfMutationsOfType(m2);

    m4_loci = source.positionsOfMutationsOfType(m4);
    m5_loci = source.positionsOfMutationsOfType(m5);
    m6_loci = source.positionsOfMutationsOfType(m6);
    m7_loci = source.positionsOfMutationsOfType(m7);
    for (i in seqAlong(m1_loci))
        destination.addNewDrawnMutation(m1, m1_loci[i]);
    for (i in seqAlong(m2_loci))
        destination.addNewDrawnMutation(m2, m2_loci[i]);
    
    for (i in seqAlong(m4_loci))
        destination.addNewDrawnMutation(m4, m4_loci[i]);
    for (i in seqAlong(m5_loci))
        destination.addNewDrawnMutation(m5, m5_loci[i]);
    for (i in seqAlong(m6_loci))
        destination.addNewDrawnMutation(m6, m6_loci[i]);
    for (i in seqAlong(m7_loci))
        destination.addNewDrawnMutation(m7, m7_loci[i]);
}

//// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {

    // Apply effects that happen in the germline.
    
    driveResistance(child.genome1, parent1, GERMLINE_RESISTANCE_RATE);
    driveResistance(child.genome2, parent2, GERMLINE_RESISTANCE_RATE);

    // Apply effects that happen in the embryo.
    
    driveResistance(child.genome1, parent1, EMBRYO_RESISTANCE_RATE);
    driveResistance(child.genome2, parent1, EMBRYO_RESISTANCE_RATE);
    
    // Resistance alleles can have the affect of rendering offspring non-viable with many of these systems.
       
    child.tag = 0;
    
    tra = sum(child.genomes.countOfMutationsOfType(m4)==1);
    Y = sum(child.genomes.countOfMutationsOfType(m7)==1);
       
    if (Y | !tra)
    	 child.tag = 1;
       
  return T;
  
}

//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {

  fitness_value = 1.0;
    
return fitness_value;}

//// FUNCTION FOR EVALUATING INFERTILITY CAUSED BY SUPRESSION DRIVES.
function (logical)isInfertile(o<Individual>$ ind) {
return F;
}

//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL) {
 	 if (individual.tag == 1)
 	 	  return;
    if (isInfertile(individual))
        return;

    attempt_no = 0;
    while (1) {
        // First, select a random potential mate.
        selected_mate = subpop.sampleIndividuals(1, tag = 1);
        
        if (!selected_mate.size())
            return;  // No available mates.
		
        // Determine attractiveness of potential mate.
        mate_attractiveness = genotypeFitness(selected_mate);

        // Determine if this mate is chosen, based on attractiveness.
        if (runif(1) < mate_attractiveness)
            break;  // Select this mate.
        // After ten candidates fail, female gives up.
        attempt_no = attempt_no + 1;
        if (attempt_no == MAX_ATTEMPTS_TO_FIND_SUITABLE_MATE)
            return;
    }
    // Mate has now been selected.

    // Check to see if mate is infertile because of drive mechanics.
    if (isInfertile(selected_mate))
        return;
	 
	  	p = genotypeFitness(individual) ;
	  		
		num_offspring = 0;
					
		if (p>0){
	  	num_offspring = rpois(1, MAX_OFFSPRING*p/GENERATION_TIME);}
		
		for (i in seqLen(num_offspring))
			offspring = subpop.addCrossed(individual, selected_mate);
}

//START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 early() {
	
	sim.addSubpop("p1", asInteger(CAPACITY/2 * (1+MAX_OFFSPRING*0.5/GENERATION_TIME)));
	all_m = p1.individuals;
	all_m.tag = 1;	
	
	sim.addSubpop("p2", asInteger(CAPACITY/2 * (1+MAX_OFFSPRING*0.5/GENERATION_TIME)));	
	all_f = p2.individuals;
	all_f.tag = 0;
	
	sim.setValue("npops", 2);
	female_ages = size(INITIAL_FEMALE_AGE_DISTRIBUTION)-1;
   male_ages = size(INITIAL_FEMALE_AGE_DISTRIBUTION)-1;
   for (m in all_m){
   	m.age = sample(0:male_ages,1,F,c(MAX_OFFSPRING*0.5/GENERATION_TIME,INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION]));}
   	
   for (f in all_f){
    	f.age = sample(0:female_ages,1,F,c(MAX_OFFSPRING*0.5/GENERATION_TIME,INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION]));
    	}

	p1.individuals.genomes.addNewDrawnMutation(m1, 1);
	p1.individuals.genomes.addNewDrawnMutation(m4, 3);
	p1.individuals.genome1.addNewDrawnMutation(m6, 5);
	p1.individuals.genome2.addNewDrawnMutation(m7, 5);
	
	p2.individuals.genomes.addNewDrawnMutation(m1, 1);
	p2.individuals.genomes.addNewDrawnMutation(m4, 3);
	p2.individuals.genome1.addNewDrawnMutation(m6, 5);
	p2.individuals.genome2.addNewDrawnMutation(m6, 5);
	
	p1.takeMigrants(all_f);
	
}
    

//// AGE BASED SURVIVAL RULES
early() {
	all = p1.individuals;
	new_larva = sum(all.age == 0);
	competition_ratio = new_larva / (MAX_OFFSPRING * 0.5 * CAPACITY/GENERATION_TIME);
	viability = INITIAL_FEMALE_AGE_DISTRIBUTION[0] * (((1 - LOW_DENSITY_GROWTH_RATE) * competition_ratio) + LOW_DENSITY_GROWTH_RATE) / (MAX_OFFSPRING / GENERATION_TIME / 2);
	for(ind in all){
		ind.fitnessScaling = SURVIVE_RATE[ind.age];		
			if(ind.age == 0){
				ind.fitnessScaling = ifelse(viability<0,0.0,viability);}
			}			
	}

//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10: early() {
	id_num = sim.getValue("npops") + 1;
	sim.setValue("npops", id_num);
	sim.addSubpop(id_num, asInteger(DROP_SIZE));

	drop = sim.subpopulations[id_num-1].individuals;	
	drop.age = 1;
	drop.tag = 1;

  // Now set the drop individuals to the correct genotypes:
   
   drop.genomes.addNewDrawnMutation(m2, 1);
   drop.genomes.addNewDrawnMutation(m4, 3);
   drop.genome1.addNewDrawnMutation(m6, 5);
   drop.genome2.addNewDrawnMutation(m7, 5);

   if (HETEROZYGOUS_DROP)
   drop.genome2.addNewDrawnMutation(m1, 1);
                
	p1.takeMigrants(drop);
        }

//// PROGRAM OUTPUT.
early() {
	// 20.1 Calculate rates that we are intersted in:
	all = p1.individuals;		
	adult = all[all.age > 0];	
	
	total_adults = sum(all.age > 0);
	total_adult_females = sum(adult.tag == 0);	
				
	num_fertile_female = total_adult_females;
			
	this_gen = sim.cycle;
	
	offspring = all[all.age == 0];
	female_offspring = sum(offspring.tag == 0);
	
	expected_female_offspring = total_adult_females * MAX_OFFSPRING/GENERATION_TIME/2;
	
	genetic_load = 1 - female_offspring/expected_female_offspring;	
	
	num_dr = 0;			
	num_has_drive = 0;		
	
	num_dr = sum(adult.genomes.countOfMutationsOfType(m2) == 1);
	num_has_drive = sum(adult.genome1.countOfMutationsOfType(m2) == 1 | adult.genome2.countOfMutationsOfType(m2) == 1);		
	rate_dr = num_dr / (2 * size(adult));
	rate_has_drive = num_has_drive / (size(adult));	
	
	catn("OUT:: " + this_gen + " " + total_adults + " " + total_adult_females + " " + num_fertile_female + " " + rate_dr + " " + rate_has_drive + " " + RELEASE_RATIO + " " + genetic_load + " " + GERMLINE_RESISTANCE_RATE);
			
	if(num_fertile_female == 0 | p1.individualCount == 0){
		catn("SUPPRESSED:: " + this_gen + " " + total_adults + " " + total_adult_females + " " + num_fertile_female + " " + rate_dr + " " + rate_has_drive + " " + RELEASE_RATIO + " " + genetic_load + " " + GERMLINE_RESISTANCE_RATE);
	
	sim.simulationFinished();
					}			
			}

//// PROGRAM END CONDITION.
267 late() {
		catn("NOT:: ");
    	sim.simulationFinished();
}