// Author: Sam Champer and Isabel Kim.
// Created in association with Jackson Champer and the Messer lab.
// A framework for simulating many different gene drives with varying parameters.

initialize() { 			

			// Overlapping generation
				defineCfgParam("WEEKS_OF_GENERATION", 6);
				survival_rate = c(1);
				for (i in 1:WEEKS_OF_GENERATION){
    				survival_rate = c(survival_rate,(WEEKS_OF_GENERATION-i)/(WEEKS_OF_GENERATION-i+1));
   			}
    	      defineConstant("INITIAL_FEMALE_AGE_DISTRIBUTION",c(WEEKS_OF_GENERATION,WEEKS_OF_GENERATION:1)/sum(1:WEEKS_OF_GENERATION));
    			defineConstant("INITIAL_MALE_AGE_DISTRIBUTION",INITIAL_FEMALE_AGE_DISTRIBUTION);
    			defineConstant("SURVIVE_RATE",survival_rate);
            defineConstant("GENERATION_TIME",sum(c(1:WEEKS_OF_GENERATION)*INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION])); 
           
			// Fitness parameters:
				defineCfgParam("DD_FITNESS_VALUE", 1.0);
				defineCfgParam("DX_FITNESS_VALUE", sqrt(DD_FITNESS_VALUE));
				defineCfgParam("SOMATIC_FITNESS_MUTLIPLIER_F", 1.0);
				defineCfgParam("SOMATIC_FITNESS_MUTLIPLIER_M", 1.0);

			// Drive types/characteristics:
        		defineCfgParam("VIABILITY_MODEL", T);

			// 3.1.5 General drive parameters:
				defineCfgParam("NUM_GRNAS", 1);

			// 3.1.6 Ecology and drop parameters:
				defineCfgParam("CAPACITY", 1000);
				defineCfgParam("RELEASE_RATIO", 5.4); 
				defineCfgParam("DROP_SIZE", CAPACITY/2*RELEASE_RATIO/GENERATION_TIME);
				print(DROP_SIZE);
				defineCfgParam("MAX_ATTEMPTS_TO_FIND_SUITABLE_MATE", 10);
				defineCfgParam("LOW_DENSITY_GROWTH_RATE", 6);
				defineCfgParam("MAX_OFFSPRING", 100); //this is average number of eggs laid by a female in one generation
				// when doing genetic load: 200 or more
				defineCfgParam("MALE_ONLY_DROP", T);
				defineCfgParam("FEMALE_ONLY_DROP", F);
				defineCfgParam("HETEROZYGOUS_DROP", F);
				defineConstant("INBREEDING_AVOIDANCE_FACTOR", 0.0); //if negative, % inc. if positive, % dec.
				defineConstant("INBREEDING_FECUNDITY_PENALTY", 0.0); //from 0 - 1, always % dec.

		// 3.2 Calculate activity step between each gRNA.
				defineConstant("GRNA_ACTIVITY_STEP", 0);

				initializeSLiMModelType("nonWF");
				
			// This simulation will use a non-Wright-Fisher model.

		// 3.3 Four variations: Wild type, drive, r1 resistance, r2 resistance.
				wt1 = initializeMutationType("m1", 0.5, "f", 0.0);
				dr = initializeMutationType("m2", 0.5, "f", 0.0);
				r1 = initializeMutationType("m3", 0.5, "f", 0.0);
				r2 = initializeMutationType("m4", 0.5, "f", 0.0);
				cut = initializeMutationType("m5", 0.5, "f", 0.0);
				gap = initializeMutationType("m6", 0.5, "f", 0.0);
				
				wt2 = initializeMutationType("m7", 0.5, "f", 0.0);	
				natural_nix = initializeMutationType("m8", 0.5, "f", 0.0);		
				
				variations1 = c(wt1, dr, r1, r2, cut, gap);
				variations2 = c(wt2, natural_nix);
				// 'cut' is a temporary placeholder, and 'gap' represents a missing segment.

		// 3.4 Variations are all part of g1 genome element.
			initializeGenomicElementType("g1", variations1, c(1, 1, 1, 1, 1, 1));
			initializeGenomicElementType("g2", variations2, c(1, 1));
			
		// 3.5 Element is NUM_GRNAS long, each spot on 
		// the element representing a GRNA target location.
			initializeGenomicElement(g1, 0, 0);
			initializeGenomicElement(g2, 3, 3);

		// 3.6 These variations overwrite one another.
			variations1.mutationStackPolicy = "l";
			variations1.mutationStackGroup = 1;
			
			variations2.mutationStackPolicy = "l";
			variations2.mutationStackGroup = 1;

		// 3.7 No mutation in this model.
			initializeMutationRate(0.0);
			
			initializeRecombinationRate(0.5);

	}

// 4. A HELPER FUNCTION FOR CONSTANTS THAT MAY ASLO BE CONFIGURED VIA COMMAND LINE.
	function (void) defineCfgParam(string$ name, lifs value) {
		if (!exists(name))
			defineConstant(name, value);
		}

//RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
	
	//Representation of the value of the two chromosomes.
		fitness_value = 1.0;
		return fitness_value;
}

//FUNCTION FOR EVALUATING INFERTILITY CAUSED BY SUPRESSION DRIVES.
	function (logical)isInfertile(o<Individual>$ ind) {
		
		return F;
	}

1: modifyChild() {

	child.tag = 0;

	if (child.countOfMutationsOfType(m2) | child.countOfMutationsOfType(m8))
		child.tag = 1;

return T;}

//REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL) {
		if (individual.tag == 1)
			return;
		if (isInfertile(individual))
			return;
		attempt_no = 0;
			while (1) {
		
		//First, select a random potential mate.
			selected_mate = subpop.sampleIndividuals(1, tag = 1);
			if (!selected_mate.size())
				return; // No available mates.

		//Determine attractiveness of potential mate.
			mate_attractiveness = genotypeFitness(selected_mate);

		//Determine if this mate is chosen, based on attractiveness.
			if (runif(1) < mate_attractiveness)
				break; // Select this mate.
		
		//After ten candidates fail, female gives up.
			attempt_no = attempt_no + 1;
			if (attempt_no == MAX_ATTEMPTS_TO_FIND_SUITABLE_MATE)
				return;
		}
	if (VIABILITY_MODEL){
	  		p = genotypeFitness(individual) ;
			num_offspring = 0;			
			if (p>0){
	  		num_offspring = rpois(1, MAX_OFFSPRING*p/GENERATION_TIME);}
	  }else{
	  		capacity_fitness_scaling = LOW_DENSITY_GROWTH_RATE / (((LOW_DENSITY_GROWTH_RATE - 1) * size(p1.individuals) / CAPACITY) + 1);
	  		p = mate_somatic_offspring_multiplier * genotypeFitness(individual) * capacity_fitness_scaling * 2 / MAX_OFFSPRING ;
			num_offspring = 0;    		
    		num_offspring = rbinom(1, MAX_OFFSPRING, p);
    		
			num_offspring = rbinom(1, 50, ifelse(p<0,0.0,p*INITIAL_FEMALE_AGE_DISTRIBUTION[0]));		
	  }
		
		for (i in seqLen(num_offspring)){
			offspring = subpop.addCrossed(individual, selected_mate);	
	}
}

//START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 early() {
	// Start with a population of wild type flies.
	sim.addSubpop("p1", asInteger(CAPACITY/2 * (1+MAX_OFFSPRING*0.5/GENERATION_TIME)));
	all_m = p1.individuals;
	all_m.tag = 1;	
	
	sim.addSubpop("p2", asInteger(CAPACITY/2 * (1+MAX_OFFSPRING*0.5/GENERATION_TIME)));	
	all_f = p2.individuals;
	all_f.tag = 0;
	
	sim.setValue("npops", 2);
	female_ages = size(INITIAL_FEMALE_AGE_DISTRIBUTION)-1;
   male_ages = size(INITIAL_FEMALE_AGE_DISTRIBUTION)-1;
   for (m in all_m){
   	m.age = sample(0:male_ages,1,F,c(MAX_OFFSPRING*0.5/GENERATION_TIME,INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION]));}
   	
   for (f in all_f){
    	f.age = sample(0:female_ages,1,F,c(MAX_OFFSPRING*0.5/GENERATION_TIME,INITIAL_FEMALE_AGE_DISTRIBUTION[1:WEEKS_OF_GENERATION]));
    	}

	p1.individuals.genomes.addNewDrawnMutation(m1, 0);
	p2.individuals.genomes.addNewDrawnMutation(m1, 0);
	
	p1.individuals.genome1.addNewDrawnMutation(m8, 3);
	p1.individuals.genome2.addNewDrawnMutation(m7, 3);
	
	p2.individuals.genomes.addNewDrawnMutation(m7, 3);
	
	p1.takeMigrants(all_f);
	
}

//// AGE BASED SURVIVAL RULES
early() {
	if (VIABILITY_MODEL){	
		all = p1.individuals;
		new_larva = sum(all.age == 0);
		competition_ratio = new_larva / (MAX_OFFSPRING * 0.5 * CAPACITY/GENERATION_TIME);
		viability = INITIAL_FEMALE_AGE_DISTRIBUTION[0] * (((1 - LOW_DENSITY_GROWTH_RATE) * competition_ratio) + LOW_DENSITY_GROWTH_RATE) / (MAX_OFFSPRING / GENERATION_TIME / 2);
		for(ind in all){
			ind.fitnessScaling = SURVIVE_RATE[ind.age];
			if(ind.age == 0){
				
				ind.fitnessScaling = ifelse(viability<0,0.0,viability);}

		}	
	}
}

//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION. 

10: early() {
	id_num = sim.getValue("npops") + 1;
	sim.setValue("npops", id_num);
	sim.addSubpop(id_num, asInteger(DROP_SIZE));
	drop = sim.subpopulations[id_num-1].individuals;	
	drop.age = 1;	
	drop.genome1.addNewDrawnMutation(m8, 3);
	drop.genome2.addNewDrawnMutation(m7, 3);
	
	drop.genomes.addNewDrawnMutation(m2, 0);
	
	if (HETEROZYGOUS_DROP)
	drop.genome2.addNewDrawnMutation(m1, 0);
	
	drop.tag = 1;

	p1.takeMigrants(drop);
}

early() {
// 20.1 Calculate rates that we are intersted in:
			
	all = p1.individuals;		
	adult = all[all.age > 0];	
	
	total_adults = sum(all.age > 0);
	total_adult_females = sum(adult.tag == 0);
	
	num_dr = 0;
	num_nix = 0;			

	rate_dr = 0;
	rate_has_drive = 0;
	num_has_nix = 0;	
				
	num_fertile_female = total_adult_females;
			
	this_gen = sim.cycle;		
			
	catn("OUT:: " + this_gen + " " + total_adults + " " + total_adult_females + " " + num_fertile_female + " " + rate_dr + " " + rate_has_drive + " " + RELEASE_RATIO + " " + num_has_nix + " " + RELEASE_RATIO);
			
	if(num_fertile_female == 0 | p1.individualCount == 0){
		catn("SUPPRESSED:: " + this_gen + " " + total_adults + " " + total_adult_females + " " + num_fertile_female + " " + rate_dr + " " + rate_has_drive + " " + RELEASE_RATIO + " " + num_has_nix + " " + RELEASE_RATIO);
	
	sim.simulationFinished();
					}			
			}


// 21. PROGRAM END CONDITION.
267 late() {
	catn("NOT:: ");
	sim.simulationFinished();
}